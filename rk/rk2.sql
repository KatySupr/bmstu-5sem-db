-- CREATE SCHEMA rk

-- CREATE TABLE rk.excursion (
-- 	id int generated by default as identity 
-- 	(start with 1 increment by 1) primary key,
-- 	name text not null UNIQUE,
-- 	description text,
-- 	dt_open date,
-- 	dt_close date
-- );
	
-- CREATE TABLE rk.stand (
-- 	id int generated by default as identity 
-- 	(start with 1 increment by 1) primary key,
-- 	name text not null UNIQUE,
-- 	subject_area text,
-- 	short_descr text
-- );

-- CREATE TABLE rk.visitor (
-- 	id int generated by default as identity 
-- 	(start with 1 increment by 1) primary key,
-- 	fullname text,
-- 	address text,
-- 	phone text
-- );

-- CREATE TABLE rk.excur_visit (
-- 	id int generated by default as identity 
-- 	(start with 1 increment by 1) primary key,
-- 	name_exc text not null references rk.excursion (name),
-- 	id_visitor int not null references rk.visitor (id)
-- );

-- CREATE TABLE rk.excur_stand (
-- 	id int generated by default as identity 
-- 	(start with 1 increment by 1) primary key,
-- 	name_exc text not null references rk.excursion (name),
-- 	stand_name text not null references rk.stand (name)
-- );

-- INSERT INTO rk.excursion as e (name, description, dt_open, dt_close)
-- VALUES
-- 	('OLOLO_HAHA_2', 'I want home please', '2020-11-11', '2021-11-11'),
-- 	('AHAHA', 'laught', '2011-12-19', '2020-11-10'),
-- 	('palace', 'palace', '2018-08-12', '2019-1-4'),
-- 	('town', 'city', '2018-08-12', '2021-11-11'),
-- 	('Moscow', 'capital city', '2011-1-19', '2019-1-4'),
-- 	('USA', 'country', '2018-08-12', '2021-09-11'),
-- 	('Apple', 'company', '2018-08-12', '2021-11-11'),
-- 	('China', 'made in china', '2020-11-11', '2021-11-11'),
-- 	('Cherry', 'Cherry cherry lady', '2011-1-19', '2020-11-10'),
-- 	('Love', 'I was made for loving you', '2020-11-11', '2021-11-11')
	
-- INSERT INTO rk.stand as s (name, subject_area, short_descr)
-- VALUES
-- 	('OLOLO', 'math', 'AHAHAHAHAH'),
-- 	('HHHHHHH', 'hh', 'Ajjjjjj'),
-- 	('May', 'pha', 'apple'),
-- 	('April', 'month', 'Ajjj'),
-- 	('A', 'month', 'Ajjj'),
-- 	('Shine', 'apple', 'Ajjj'),
-- 	('Hello', 'world', '!'),
-- 	('I', 'was', 'made'),
-- 	('God', 'help', 'me'),
-- 	('Home', 'hoooooome', 'AllllA')

-- INSERT INTO rk.visitor as v (fullname, address, phone)
-- VALUES
-- 	('OLOLO', 'SSSR', '999999999'),
-- 	('Mike', 'USA', '9995679999'),
-- 	('LEXA', 'SSSR', '996789999'),
-- 	('koly', 'HAHA', '9995679999'),
-- 	('Oly', 'SSSR', '999999999'),
-- 	('Mik', 'AHAHA', '9995679999'),
-- 	('Tic', 'SSSR', '996789999'),
-- 	('Pic', 'HAHA', '9995679999'),
-- 	('MAsha', 'Canada', '996788799'),
-- 	('Pasha', 'HAHA', '9995679999')
	
-- INSERT INTO rk.excur_stand as es (name_exc, stand_name)
-- VALUES
-- 	('OLOLO_HAHA_2', 'OLOLO'),
-- 	('OLOLO_HAHA_2', 'Home'),
-- 	('palace', 'Home'),
-- 	('town', 'Home'),
-- 	('Moscow', 'Hello'),
-- 	('USA', 'Hello'),
-- 	('Apple', 'Hello'),
-- 	('China', 'April'),
-- 	('Cherry', 'April'),
-- 	('OLOLO_HAHA_2', 'God')
	
-- INSERT INTO rk.excur_visit as ev (name_exc, id_visitor)
-- VALUES
-- 	('OLOLO_HAHA_2', 1),
-- 	('OLOLO_HAHA_2', 5),
-- 	('palace', 1),
-- 	('town', 4),
-- 	('Moscow', 3),
-- 	('USA', 8),
-- 	('Apple', 9),
-- 	('China', 10),
-- 	('Cherry', 10),
-- 	('OLOLO_HAHA_2', 7)

-- ЗАДАНИЕ 2

-- -- 1 - инструкция SELECT, использующая поисковое выражение CASE
-- -- определить, какие выставки,открывшиеся после 2015 года, закрыты
-- SELECT name,
-- case
-- 	when dt_close < '2021-11-24' then 'CLOSE'
-- 	else 'OPEN'
-- end as type
-- from rk.excursion e
-- where dt_open > '2015-01-01'
-- order by dt_open 

-- -- 2 - инструкция UPDATE со скалярным подзапросом в предложении SET
-- -- установить самую позднюю дату закрырия у тех экскурсий, которые открылись после 2018 года
-- update rk.excursion
-- set dt_close = (
-- 	select max(dt_close)
-- 	from rk.excursion
-- )
-- where dt_open > '2018-01-01'

-- -- 3 - инструкцию SELECT, консолидирующую данные с помощью предложения GROUP BY и предложения HAVING
-- -- поситители, посетившие более 1 экскурсии
-- select fullname, count(*) as num
-- from rk.visitor v join rk.excur_visit ev on v.id = ev.id_visitor
-- group by fullname
-- having count(*) > 1
-- order by fullname

-- ЗАДАНИЕ 3
create or replace procedure table_del()
language 'sql'
as $$
	delete from pg_user
	where pg_user.passwd is null
$$;

call table_del('visitor');
